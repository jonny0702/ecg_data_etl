version: '3.8'

services:
  zookeeper:
    image: 'confluentinc/cp-zookeeper'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      confluent:
  kafka_service:
    image: "confluentinc/cp-kafka"
    hostname: kafka_service
    container_name: kafka_service
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_service:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 2000000000      # Límite aumentado a 2 GB (ajústalo según tus necesidades)
      KAFKA_REPLICA_FETCH_MAX_BYTES: 2000000000 # Ajuste para réplicas
      KAFKA_FETCH_MAX_BYTES: 2000000000         # Ajuste para clientes
      KAFKA_MAX_REQUEST_SIZE: 2000000000
      KAFKA_METRICT_REPORTER: io.confluent.metrics.reporter.ConfluentMetricsReporter
    healthcheck:
      test: ["CMD-SHELL", "echo > /dev/tcp/kafka_service/9092"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      confluent:
  mosquito:
    image: "eclipse-mosquitto"
    ports:
      - "1883:1883" #Puerto para MQTT
      - "9001:9001" #Puerto webSocket
    depends_on:
      kafka_service:
        condition: service_healthy
  kafka-connect:
    image: "confluentinc/cp-kafka-connect"
    container_name: kafka-connect
    ports:
      - "8083:8083"
    depends_on:
      kafka_service:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka_service:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "quickstart"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc kafka-connect 8083" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      confluent:
  control_center:
    image: "confluentinc/cp-enterprise-control-center"
    hostname: control-center
    container_name: control-center
    depends_on:
      kafka_service:
        condition: service_healthy
      kafka-connect:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka_service:9092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLIENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

#  spark-master:
#    image: "bitnami/spark"
#    container_name: spark_master
#    environment:
#      SPARK_MODE: master
#    ports:
#      - "9090:8080"
#      - "7077:7077"
#    depends_on:
#      - kafka_service
#      - kafka-connect
#      - zookeeper
#      - mosquito
#    networks:
#      - confluent
#  spark-worker:
#    image: "bitnami/spark"
#    environment:
#      SPARK_MODE: worker
#      SPARK_MASTER_URL: spark://spark-master:7077
#    depends_on:
#      - spark-master
#    ports:
#      - "8081:8081"
#    networks:
#      - confluent
networks:
  confluent:
    driver: bridge
